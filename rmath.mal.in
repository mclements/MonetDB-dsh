# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2017 MonetDB B.V.
# Copyright 2018 Mark Clements

module rmath;
module batrmath;
divert(`-1')

define(`DIST1FUNCTION',`# $1 distribution
FUNCTION4($1 cumulative density function,p$2,dbl,q,dbl,$3,int,lower,int,log)
FUNCTION4($1 quantile function,q$2,dbl,p,dbl,$3,int,lower,int,log)
FUNCTION3($1 probability density function,d$2,dbl,p,dbl,$3,int,log)
UFUNCTION1($1 random numbers,r$2,dbl,$3)
')

define(`DIST2FUNCTION',`# $1 distribution
FUNCTION5($1 cumulative density function,p$2,dbl,q,dbl,$3,dbl,$4,int,lower,int,log)
FUNCTION5($1 quantile function,q$2,dbl,p,dbl,$3,dbl,$4,int,lower,int,log)
FUNCTION4($1 probability density function,d$2,dbl,p,dbl,$3,dbl,$4,int,log)
UFUNCTION2($1 random numbers,r$2,dbl,$3,dbl,$4)
')

define(`DIST3FUNCTION',`# $1 distribution
FUNCTION6($1 cumulative density function,p$2,dbl,q,dbl,$3,dbl,$4,dbl,$5,int,lower,int,log)
FUNCTION6($1 quantile function,q$2,dbl,p,dbl,$3,dbl,$4,dbl,$5,int,lower,int,log)
FUNCTION5($1 probability density function,d$2,dbl,p,dbl,$3,dbl,$4,dbl,$5,int,log)
UFUNCTION3($1 random numbers,r$2,dbl,$3,dbl,$4,dbl,$5)
')

define(`CONSTANTFUN',`# $1
function rmath.$2():dbl;
  value:dbl := $3;
  return value;
end;
')
define(`FUNCTION0',`command rmath.$2():dbl
  address rmath_$2
  comment "$1";
command batrmath.$2():bat[:dbl]
  address batrmath_$2
  comment "$1";
')
define(`FUNCTION1',`command rmath.$2($4:$3):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3]):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
')
define(`FUNCTION2',`command rmath.$2($4:$3,$6:$5):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:$5):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:bat[:$5]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')
define(`FUNCTION3',`command rmath.$2($4:$3,$6:$5,$8:$7):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:$5,$8:$7):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:$7):bat[:dbl];
  third:bat[:$7] := algebra.project($4,$8:$7);
  out:bat[:dbl] := batrmath.$2($4,$6,third);
  return out;
end;
')
define(`FUNCTION4',`command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:$7,$10:$9):bat[:dbl];
  third:bat[:$7] := algebra.project($4,$8:$7);
  fourth:bat[:$9] := algebra.project($4,$10:$9);
  out:bat[:dbl] := batrmath.$2($4,$6,third,fourth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:$9):bat[:dbl];
  fourth:bat[:$9] := algebra.project($4,$10:$9);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,fourth);
  return out;
end;
')
define(`FUNCTION5',`command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9,$12:$11):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9,$12:$11):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:bat[:$11]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:$7,$10:$9,$12:$11):bat[:dbl];
  third:bat[$7] := algebra.project($4,$8:$7);
  fourth:bat[:$9] := algebra.project($4,$10:$9);
  fifth:bat[:$11] := algebra.project($4,$12:$11);
  out:bat[:dbl] := batrmath.$2($4,$6,third,fourth,fifth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:$9,$12:$11):bat[:dbl];
  fourth:bat[:$9] := algebra.project($4,$10:$9);
  fifth:bat[:$11] := algebra.project($4,$12:$11);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,fourth,fifth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:$11):bat[:dbl];
  fifth:bat[:$11] := algebra.project($4,$12:$11);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,$10,fifth);
  return out;
end;
')

define(`FUNCTION6',`command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9,$12:$11,$14:$13):dbl
  address rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9,$12:$11,$14:$13):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:bat[:$11],$14:bat[:$13]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:$7,$10:$9,$12:$11,$14:$13):bat[:dbl];
  third:bat[$7] := algebra.project($4,$8:$7);
  fourth:bat[$9] := algebra.project($4,$10:$9);
  fifth:bat[$11] := algebra.project($4,$12:$11);
  sixth:bat[$13] := algebra.project($4,$14:$13);
  out:bat[:dbl] := batrmath.$2($4,$6,third,fourth,fifth,sixth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:$9,$12:$11,$14:$13):bat[:dbl];
  fourth:bat[$9] := algebra.project($4,$10:$9);
  fifth:bat[$11] := algebra.project($4,$12:$11);
  sixth:bat[$13] := algebra.project($4,$14:$13);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,fourth,fifth,sixth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:$11,$14:$13):bat[:dbl];
  fifth:bat[$11] := algebra.project($4,$12:$11);
  sixth:bat[$13] := algebra.project($4,$14:$13);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,$10,fifth,sixth);
  return out;
end;
function batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:bat[:$11],$14:$13):bat[:dbl];
  sixth:bat[$13] := algebra.project($4,$14:$13);
  out:bat[:dbl] := batrmath.$2($4,$6,$8,$10,$12,sixth);
  return out;
end;
')

# unsafe functions
define(`UFUNCTION0',`unsafe command rmath.$2():dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2():bat[:dbl]
  address batrmath_$2
  comment "$1";
')
define(`UFUNCTION1',`unsafe command rmath.$2($4:$3):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3]):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
')
define(`UFUNCTION2',`unsafe command rmath.$2($4:$3,$6:$5):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:$5):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:bat[:$5]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')
define(`UFUNCTION3',`unsafe command rmath.$2($4:$3,$6:$5,$8:$7):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:$5,$8:$7):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')
define(`UFUNCTION4',`unsafe command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')
define(`UFUNCTION5',`unsafe command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9,$12:$11):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9,$12:$11):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:bat[:$11]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')
define(`UFUNCTION6',`unsafe command rmath.$2($4:$3,$6:$5,$8:$7,$10:$9,$12:$11,$14:$13):dbl
  address rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:$5,$8:$7,$10:$9,$12:$11,$14:$13):bat[:dbl]
  address bat_rmath_$2
  comment "$1";
unsafe command batrmath.$2($4:bat[:$3],$6:bat[:$5],$8:bat[:$7],$10:bat[:$9],$12:bat[:$11],$14:bat[:$13]):bat[:dbl]
  address bat_rmath_bats_$2
  comment "$1";
')

divert(`1')

FUNCTION0(e,M_E)
FUNCTION0(log2(e),M_LOG2E)
FUNCTION0(log10(e),M_LOG10E)
FUNCTION0(ln(2),M_LN2)
FUNCTION0(ln(10),M_LN10)
FUNCTION0(pi,M_PI)
FUNCTION0(2*pi,M_2PI)
FUNCTION0(pi/2,M_PI_2)
FUNCTION0(pi/4,M_PI_4)
FUNCTION0(1/pi,M_1_PI)
FUNCTION0(2/pi,M_2_PI)
FUNCTION0(2/sqrt(pi),M_2_SQRTPI)
FUNCTION0(sqrt(2),M_SQRT2)
FUNCTION0(1/sqrt(2),M_SQRT1_2)
FUNCTION0(sqrt(3),M_SQRT_3)
FUNCTION0(sqrt(32),M_SQRT_32)
FUNCTION0(log10(2),M_LOG10_2)
FUNCTION0(sqrt(pi),M_SQRT_PI)
FUNCTION0(1/sqrt(2pi),M_1_SQRT_2PI)
FUNCTION0(sqrt(2/pi),M_SQRT_2dPI)
FUNCTION0(log(2*pi),M_LN_2PI)
FUNCTION0(log(pi)/2,M_LN_SQRT_PI)
FUNCTION0(log(2*pi)/2,M_LN_SQRT_2PI)
FUNCTION0(log(pi/2)/2,M_LN_SQRT_PId2)
FUNCTION2(R_pow function,R_pow,dbl,x,dbl,y)
FUNCTION2(R_pow_di function,R_pow_di,dbl,x,int,y)
FUNCTION0(Normal random numbers,norm_rand)
FUNCTION0(Uniform random numbers,unif_rand)
FUNCTION0(Exponential random numbers,exp_rand)
command set_seed(a:int,b:int):dbl
address rmath_set_seed
comment "R set seed";

# void	get_seed(unsigned int *, unsigned int *);

DIST2FUNCTION(Normal,norm,mean,sd)
DIST2FUNCTION(Uniform,unif,min,max)
DIST2FUNCTION(Gamma,gamma,shape,scale)
FUNCTION1(log1pmx,log1pmx,dbl,x)
FUNCTION1(log1pexp,log1pexp,dbl,x)
FUNCTION1(lgamma1p,lgamma1p,dbl,x)
FUNCTION2(logspace_add,logspace_add,dbl,logx,dbl,logy)
FUNCTION2(logspace_sub,logspace_sub,dbl,logx,dbl,logy)

# double  logspace_sum(const double *, int);

DIST2FUNCTION(Beta,beta,shape1,shape2)
DIST2FUNCTION(Log-normal,lnorm,meanlog,sdlog)
DIST1FUNCTION(Chi-squared,chisq,df)
DIST2FUNCTION(Non-central chi-squared,nchisq,df,ncp)
DIST2FUNCTION(F,f,df1,df2)
DIST1FUNCTION(T,t,df)
DIST2FUNCTION(Binomial,binom,size,prob)

# void	rmultinom(int, double*, int, int*);

DIST2FUNCTION(Cauchy,cauchy,location,scale)
DIST1FUNCTION(Exponential,exp,rate)
DIST1FUNCTION(Geometric,geom,prob)
DIST3FUNCTION(Hypergeometric,hyper,m,n,k)
DIST2FUNCTION(Negative Binomial,nbinom,size,prob)
DIST1FUNCTION(Poisson,pois,lambda)
DIST2FUNCTION(Weibull,weibull,shape,scale)
DIST2FUNCTION(Logistic,logis,location,scale)

# DIST3FUNCTION(nbeta,shape1,shape2,ncp)

FUNCTION6(Non-central beta cumulative distribution function,pnbeta,dbl,q,dbl,shape1,dbl,shape2,dbl,ncp,int,lower,int,log)
FUNCTION6(Non-central beta quantile function,qnbeta,dbl,p,dbl,shape1,dbl,shape2,dbl,ncp,int,lower,int,log)
FUNCTION5(Non-central beta probability density function,dnbeta,dbl,x,dbl,shape1,dbl,shape2,dbl,ncp,int,log)

# FUNCTION3(rnbeta,dbl,shape1,dbl,shape2,dbl,ncp)
# DIST3FUNCTION(nf,df1,df2,ncp)

FUNCTION6(Non-central F cumulative distribution function,pnf,dbl,q,dbl,df1,dbl,df2,dbl,ncp,int,lower,int,log)
FUNCTION6(Non-central F quantile function,qnf,dbl,p,dbl,df1,dbl,df2,dbl,ncp,int,lower,int,log)
FUNCTION5(Non-central F probability density function,dnf,dbl,x,dbl,df1,dbl,df2,dbl,ncp,int,log)

# DIST2FUNCTION(nt,df,ncp)

FUNCTION5(Non-central Student t cumulative distribution function,pnt,dbl,q,dbl,df,dbl,ncp,int,lower,int,log)
FUNCTION5(Non-central Student t quantile function,qnt,dbl,p,dbl,df,dbl,ncp,int,lower,int,log)
FUNCTION4(Non-central Student t probability density function,dnt,dbl,x,dbl,df,dbl,ncp,int,log)
FUNCTION6(Studentised rangecumulative distribution function,ptukey,dbl,q,dbl,nmeans,dbl,df,dbl,nranges,int,lower,int,log)
FUNCTION6(Studentised range quantile function,qtukey,dbl,p,dbl,nmeans,dbl,df,dbl,nranges,int,lower,int,log)
DIST2FUNCTION(Wilcoxon rank sum,wilcox, m, n)
DIST1FUNCTION(Wilcoxon signed rank,signrank,n)
FUNCTION1(gammafn,gammafn,dbl,x)
FUNCTION1(lgammafn,lgammafn,dbl,x)

# double  lgammafn_sign(double, int*);
# void    dpsifn(double, int, int, int, double*, int*, int*);

FUNCTION2(psigamma,psigamma,dbl,x,dbl,y)
FUNCTION1(digamma,digamma,dbl,x)
FUNCTION1(trigamma,trigamma,dbl,x)
FUNCTION1(tetragamma,tetragamma,dbl,x)
FUNCTION1(pentagamma,pentagamma,dbl,x)
FUNCTION2(beta,beta,dbl,x,dbl,y)
FUNCTION2(lbeta,lbeta,dbl,x,dbl,y)
FUNCTION2(choose,choose,dbl,n,dbl,k)
FUNCTION2(lchoose,lchoose,dbl,n,dbl,k)
FUNCTION3(bessel_i,bessel_i,dbl,x,dbl,nu,dbl,scaled)
FUNCTION2(bessel_j,bessel_j,dbl,x,dbl,nu)
FUNCTION3(bessel_k,bessel_k,dbl,x,dbl,nu,dbl,scaled)
FUNCTION2(bessel_y,bessel_y,dbl,x,dbl,nu)

# double	bessel_i_ex(double, double, double, double *);
# double	bessel_j_ex(double, double, double *);
# double	bessel_k_ex(double, double, double, double *);
# double	bessel_y_ex(double, double, double *);
# FUNCTION2(pythag,dbl,x,dbl,y)
# int	imax2(int, int);
# int	imin2(int, int);

FUNCTION2(fmax2,fmax2,dbl,x,dbl,y)
FUNCTION2(fmin2,fmin2,dbl,x,dbl,y)
# FUNCTION1(sign,sign,dbl,x)
FUNCTION2(fprec,fprec,dbl,x,dbl,y)
FUNCTION2(fround,fround,dbl,x,dbl,y)
FUNCTION2(fsign,fsign,dbl,x,dbl,y)
FUNCTION1(ftrunc,ftrunc,dbl,x)

# FUNCTION1(log1pmx,dbl,x) # repeated
# FUNCTION1(lgamma1p,dbl,x) # repeated
# double cospi(double);
# double sinpi(double);
# double tanpi(double);
# rmath_export dbl NA_REAL;
# rmath_export dbl R_PosInf;
# rmath_export dbl R_NegInf;
# rmath_export int N01_kind;

FUNCTION3(Exact Poisson confidence interval,poisson_ci,dbl,x,int,boundary,dbl,conflevel)
FUNCTION4(Poisson test,poisson_test,dbl,x,dbl,t,dbl,r,int,alternative)

command rmath.poisson_cis(x:dbl,conflevel:dbl)(:bat[:dbl],:bat[:dbl])
  address rmath_scalar_bat_poisson_cis
  comment "Exact Poisson confidence intervals";
function batrmath.poisson_cis(x:bat[:dbl],conflevel:bat[:dbl])(:bat[:dbl],:bat[:dbl]);
  one:bat[:int] := algebra.project(x,1:int);
  two:bat[:int] := algebra.project(x,2:int);
  lci:bat[:dbl] := batrmath.poisson_ci(x,one,conflevel);
  uci:bat[:dbl] := batrmath.poisson_ci(x,two,conflevel);
  return (lci,uci);
end;
function batrmath.poisson_cis(x:bat[:dbl],conflevel:dbl)(:bat[:dbl],:bat[:dbl]);
  cl:bat[:dbl] := algebra.project(x,conflevel);
  return (lci,uci) := batrmath.poisson_cis(x,cl);
end;

function rmath.poisson_cis2(x:dbl,conflevel:dbl)(:bat[:dbl],:bat[:dbl]);
  lcii:dbl := rmath.poisson_ci(x,1:int,conflevel);
  ucii:dbl := rmath.poisson_ci(x,2:int,conflevel);
  lci:bat[:dbl] := bat.single(lcii);
  uci:bat[:dbl] := bat.single(ucii);
  return (lci,uci);
end;
