#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <style type="text/css">.abstract {max-width: 30em; margin-left: auto; margin-right: auto;}</style>

#+OPTIONS: H:3 num:nil html-postamble:nil

#+title: MonetDB-dsh: MonetDB extension for window functions (exploratory).

* Setup

#+BEGIN_SRC emacs-lisp :results none
(cd "~/work")
(shell-command "monetdbd start ~/work/mydbfarm || true")
#+END_SRC

* Test data

#+begin_src sql :engine mal :cmdline "-d testt" :results output :exports result
s:bat[:oid] := bat.new(nil:oid);
bat.append(s, 0:oid);
bat.append(s, 0:oid);
bat.append(s, 0:oid);
bat.append(s, 0:oid);
bat.append(s, 0:oid);
bat.append(s, 0:oid);
bat.append(s, 1:oid);
bat.append(s, 1:oid);
bat.append(s, 1:oid);
bat.append(s, 1:oid);
bat.append(s, 2:oid);
bat.append(s, 3:oid);
bat.append(s, 3:oid);

i:bat[:int] := bat.new(nil:int);
bat.append(i, 0);
bat.append(i, 1);
bat.append(i, 2);
bat.append(i, 3);
bat.append(i, 4);
bat.append(i, 5);
bat.append(i, 6);
bat.append(i, 7);
bat.append(i, 8);
bat.append(i, 9);
bat.append(i, 10);
bat.append(i, 11);
bat.append(i, 12);

d:bat[:bit] := batsql.diff(s);

rsum:bat[:int] := dsh.win_fun_sum(d, i, 3:lng);

rmin:bat[:int] := dsh.win_fun_min(d, i, 3:lng);
rmax:bat[:int] := dsh.win_fun_max(d, i, 3:lng);

# int avg with div
ravg:bat[:int] := dsh.win_fun_avg(d, i, 3:lng);
idbl := batcalc.dbl(i);
ravgdbl:bat[:dbl] := dsh.win_fun_avg(d, idbl, 3:lng);

rnum:bat[:int] := batsql.row_number(d, d, nil:bit);

# simulate count with row number
rcntsim:bat[:int] := batcalc.min(3, rnum);
rcnt:bat[:int] := dsh.win_fun_count(d, 3:lng);

rfst:bat[:int] := dsh.win_fun_first_value(d, i, 3:lng);

io.print(s, d, i, rsum, rmin, rmax, ravg, ravgdbl, rnum, rcnt, rcntsim, rfst);
#+end_src

#+RESULTS:
#+begin_example
#--------------------------#
# t	t	t	t	t	t	t	t	t	t	t	t	t  # name
# void	oid	bit	int	int	int	int	int	dbl	int	int	int	int  # type
#--------------------------#
[ 0@0,	0@0,	false,	0,	0,	0,	0,	0,	0,	1,	1,	1,	0  ]
[ 1@0,	0@0,	false,	1,	1,	0,	1,	0,	0.5,	2,	2,	2,	0  ]
[ 2@0,	0@0,	false,	2,	3,	0,	2,	1,	1,	3,	3,	3,	0  ]
[ 3@0,	0@0,	false,	3,	6,	1,	3,	2,	2,	4,	3,	3,	1  ]
[ 4@0,	0@0,	false,	4,	9,	2,	4,	3,	3,	5,	3,	3,	2  ]
[ 5@0,	0@0,	false,	5,	12,	3,	5,	4,	4,	6,	3,	3,	3  ]
[ 6@0,	1@0,	true,	6,	6,	6,	6,	6,	6,	1,	1,	1,	6  ]
[ 7@0,	1@0,	false,	7,	13,	6,	7,	6,	6.5,	2,	2,	2,	6  ]
[ 8@0,	1@0,	false,	8,	21,	6,	8,	7,	7,	3,	3,	3,	6  ]
[ 9@0,	1@0,	false,	9,	24,	7,	9,	8,	8,	4,	3,	3,	7  ]
[ 10@0,	2@0,	true,	10,	10,	10,	10,	10,	10,	1,	1,	1,	10  ]
[ 11@0,	3@0,	true,	11,	11,	11,	11,	11,	11,	1,	1,	1,	11  ]
[ 12@0,	3@0,	false,	12,	23,	11,	12,	11,	11.5,	2,	2,	2,	11  ]
#+end_example

+ Note: BATs do not persist between MAL sessions. The MAL code above can not be separated, as the intermediate values are lost.


#+BEGIN_SRC sql :engine monetdb :cmdline "-d testt" :results output :exports result
  drop table if exists temp;

  create table temp as
  select s, cast(row_number() over() as double) as i 
  from (select cast(0 as oid) as s from sys.generate_series(0,6)
  union all select cast(1 as oid) from sys.generate_series(0,4)
  union all select cast(2 as oid) 
  union all select cast(3 as oid) union all select cast(3 as oid)) as t;

  -- select * from temp;
  select *, dsh.diff(s) as d from temp;
  -- select *, dsh.win_fun_sum(d, i, three) from (select *, dsh.diff(s) as d, cast(3 as integer) as three from temp) as t;
#+END_SRC

#+RESULTS:
#+begin_example
operation successful
operation successful
+------+--------------------------+-------+
| s    | i                        | d     |
+======+==========================+=======+
|  0@0 |                        1 | false |
|  0@0 |                        2 | false |
|  0@0 |                        3 | false |
|  0@0 |                        4 | false |
|  0@0 |                        5 | false |
|  0@0 |                        6 | false |
|  1@0 |                        7 | true  |
|  1@0 |                        8 | false |
|  1@0 |                        9 | false |
|  1@0 |                       10 | false |
|  2@0 |                       11 | true  |
|  3@0 |                       12 | true  |
|  3@0 |                       13 | false |
+------+--------------------------+-------+
13 tuples
#+end_example

